# gui.py
import streamlit as st
from PIL import Image
import numpy as np
import cv2
from io import BytesIO
from keras.models import load_model
import time
import os
import random

MODEL_PATH = r"D:\SmartTrafficByCNN\my_model.h5"  
DEMO_FOLDER = r"D:\SmartTrafficByCNN\Meta"  

@st.cache_resource(show_spinner=False)
def load_trained_model(path):
    try:
        m = load_model(path)
        return m
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ load model: {e}")
        return None

model = load_trained_model(MODEL_PATH)

classes = {
    1: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (20 km/h)',
    2: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (30 km/h)',
    3: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (50 km/h)',
    4: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (60 km/h)',
    5: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (70 km/h)',
    6: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (80 km/h)',
    7: 'H·∫øt gi·ªõi h·∫°n t·ªëc ƒë·ªô (80 km/h)',
    8: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (100 km/h)',
    9: 'Gi·ªõi h·∫°n t·ªëc ƒë·ªô (120 km/h)',
    10: 'C·∫•m v∆∞·ª£t',
    11: 'C·∫•m xe tr√™n 3.5 t·∫•n v∆∞·ª£t',
    12: 'ƒê∆∞·ª£c ∆∞u ti√™n t·∫°i ng√£ t∆∞',
    13: 'ƒê∆∞·ªùng ∆∞u ti√™n',
    14: 'Nh∆∞·ªùng ƒë∆∞·ªùng',
    15: 'D·ª´ng l·∫°i (STOP)',
    16: 'C·∫•m m·ªçi ph∆∞∆°ng ti·ªán',
    17: 'C·∫•m xe tr√™n 3.5 t·∫•n',
    18: 'Kh√¥ng x√°c ƒë·ªãnh',
    19: 'Ch√∫ √Ω nguy hi·ªÉm',
    20: 'ƒê∆∞·ªùng cong nguy hi·ªÉm b√™n tr√°i',
    21: 'ƒê∆∞·ªùng cong nguy hi·ªÉm b√™n ph·∫£i',
    22: 'ƒê∆∞·ªùng cong li√™n ti·∫øp',
    23: 'ƒê∆∞·ªùng x√≥c',
    24: 'ƒê∆∞·ªùng tr∆°n tr∆∞·ª£t',
    25: 'ƒê∆∞·ªùng h·∫πp b√™n ph·∫£i',
    26: 'ƒêang thi c√¥ng',
    27: 'C√≥ ƒë√®n giao th√¥ng',
    28: 'C√≥ ng∆∞·ªùi ƒëi b·ªô',
    29: 'Tr·∫ª em bƒÉng qua ƒë∆∞·ªùng',
    30: 'Xe ƒë·∫°p bƒÉng qua ƒë∆∞·ªùng',
    31: 'C·∫©n th·∫≠n bƒÉng/tuy·∫øt',
    32: 'ƒê·ªông v·∫≠t hoang d√£ bƒÉng qua',
    33: 'H·∫øt gi·ªõi h·∫°n t·ªëc ƒë·ªô v√† c·∫•m v∆∞·ª£t',
    34: 'R·∫Ω ph·∫£i ph√≠a tr∆∞·ªõc',
    35: 'R·∫Ω tr√°i ph√≠a tr∆∞·ªõc',
    36: 'Ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng',
    37: 'ƒêi th·∫≥ng ho·∫∑c r·∫Ω ph·∫£i',
    38: 'ƒêi th·∫≥ng ho·∫∑c r·∫Ω tr√°i',
    39: 'ƒêi v·ªÅ b√™n ph·∫£i',
    40: 'ƒêi v·ªÅ b√™n tr√°i',
    41: 'B·∫Øt bu·ªôc ƒëi theo v√≤ng xuy·∫øn',
    42: 'H·∫øt c·∫•m v∆∞·ª£t',
    43: 'H·∫øt c·∫•m v∆∞·ª£t xe tr√™n 3.5 t·∫•n'
}

descriptions = {
    1: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 20 km/h.',
    2: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 30 km/h.', 
    3: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 50 km/h.', 
    4: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 60 km/h.', 
    5: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 70 km/h.', 
    6: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 80 km/h.', 
    7: 'Khi g·∫∑p bi·ªÉn b√°o n√†y h·∫øt hi·ªáu l·ª±c gi·ªõi h·∫°n t·ªëc ƒë·ªô 80 km/h.', 
    8: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 100 km/h.', 
    9: 'Khi g·∫∑p bi·ªÉn b√°o n√†y ph·∫£i di chuy·ªÉn v·ªõi v·∫≠n t·ªëc kh√¥ng v∆∞·ª£t qu√° 120 km/h.', 
    10: 'Khi g·∫∑p bi·ªÉn b√°o n√†y kh√¥ng ƒë∆∞·ª£c ph√©p v∆∞·ª£t.', 
    11: 'Khi g·∫∑p bi·ªÉn b√°o n√†y xe tr·ªçng t·∫£i tr√™n 3.5 t·∫•n c·∫•m v∆∞·ª£t v∆∞·ª£t.', 
    12: 'Bi·ªÉn b√°o cho bi·∫øt b·∫°n c√≥ quy·ªÅn ∆∞u ti√™n ƒëi tr∆∞·ªõc c√°c xe kh√°c t·∫°i ng√£ t∆∞ ho·∫∑c n∆°i giao nhau.', 
    13: 'Bi·ªÉn b√°o ch·ªâ d·∫´n ƒëo·∫°n ƒë∆∞·ªùng b·∫°n ƒëang ƒëi l√† ƒë∆∞·ªùng ∆∞u ti√™n so v·ªõi c√°c ƒë∆∞·ªùng kh√°c c·∫Øt ngang.', 
    14: 'Bi·ªÉn y√™u c·∫ßu ng∆∞·ªùi l√°i xe ph·∫£i nh∆∞·ªùng ƒë∆∞·ªùng cho ph∆∞∆°ng ti·ªán kh√°c ƒëang l∆∞u th√¥ng.', 
    15: 'Bi·ªÉn b√°o hi·ªáu l·ªánh d·ª´ng l·∫°i ho√†n to√†n tr∆∞·ªõc khi ti·∫øp t·ª•c di chuy·ªÉn, th∆∞·ªùng t·∫°i ng√£ t∆∞.', 
    16: 'Bi·ªÉn c·∫•m t·∫•t c·∫£ c√°c ph∆∞∆°ng ti·ªán (c∆° gi·ªõi v√† th√¥ s∆°) ƒëi v√†o ƒëo·∫°n ƒë∆∞·ªùng n√†y.', 
    17: 'Bi·ªÉn c·∫•m c√°c ph∆∞∆°ng ti·ªán c√≥ tr·ªçng t·∫£i l·ªõn h∆°n 3.5 t·∫•n ƒëi v√†o khu v·ª±c n√†y.', 
    18: 'Bi·ªÉn kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c lo·∫°i ‚Äì c√≥ th·ªÉ do ·∫£nh kh√¥ng r√µ ho·∫∑c kh√¥ng ƒë√∫ng bi·ªÉn giao th√¥ng.', 
    19: 'Bi·ªÉn c·∫£nh b√°o khu v·ª±c ph√≠a tr∆∞·ªõc c√≥ t√¨nh hu·ªëng nguy hi·ªÉm, ng∆∞·ªùi l√°i xe c·∫ßn th·∫≠n tr·ªçng.',
    20: 'Bi·ªÉn c·∫£nh b√°o ph√≠a tr∆∞·ªõc c√≥ ƒëo·∫°n ƒë∆∞·ªùng cong nguy hi·ªÉm sang b√™n tr√°i.', 
    21: 'Bi·ªÉn c·∫£nh b√°o ph√≠a tr∆∞·ªõc c√≥ ƒëo·∫°n ƒë∆∞·ªùng cong nguy hi·ªÉm sang b√™n ph·∫£i.', 
    22: 'Bi·ªÉn c·∫£nh b√°o s·∫Øp t·ªõi l√† ƒëo·∫°n ƒë∆∞·ªùng c√≥ nhi·ªÅu kh√∫c cua li√™n ti·∫øp.', 
    23: 'Bi·ªÉn c·∫£nh b√°o ƒëo·∫°n ƒë∆∞·ªùng g·ªì gh·ªÅ, c√≥ ·ªï g√† ho·∫∑c m·∫∑t ƒë∆∞·ªùng kh√¥ng b·∫±ng ph·∫≥ng.', 
    24: 'Bi·ªÉn c·∫£nh b√°o ƒëo·∫°n ƒë∆∞·ªùng tr∆°n tr∆∞·ª£t, c·∫ßn gi·∫£m t·ªëc ƒë·ªô v√† gi·ªØ kho·∫£ng c√°ch an to√†n.', 
    25: 'Bi·ªÉn c·∫£nh b√°o ph·∫ßn ƒë∆∞·ªùng ph√≠a b√™n ph·∫£i b·ªã thu h·∫πp l·∫°i ‚Äì c·∫ßn ch√∫ √Ω khi ƒëi qua.', 
    26: 'Bi·ªÉn c·∫£nh b√°o ƒëo·∫°n ƒë∆∞·ªùng ph√≠a tr∆∞·ªõc ƒëang thi c√¥ng, c√≥ th·ªÉ g√¢y c·∫£n tr·ªü giao th√¥ng.', 
    27: 'Bi·ªÉn c·∫£nh b√°o c√≥ ƒë√®n t√≠n hi·ªáu giao th√¥ng ph√≠a tr∆∞·ªõc, c·∫ßn ch√∫ √Ω quan s√°t.', 
    28: 'Bi·ªÉn c·∫£nh b√°o khu v·ª±c ph√≠a tr∆∞·ªõc l√† ƒë∆∞·ªùng d√†nh cho ng∆∞·ªùi ƒëi b·ªô sang ƒë∆∞·ªùng.', 
    29: 'Bi·ªÉn c·∫£nh b√°o g·∫ßn khu v·ª±c tr∆∞·ªùng h·ªçc, tr·∫ª em c√≥ th·ªÉ bƒÉng qua ƒë∆∞·ªùng b·∫•t ng·ªù.', 
    30: 'Bi·ªÉn c·∫£nh b√°o khu v·ª±c giao c·∫Øt v·ªõi ƒë∆∞·ªùng d√†nh cho xe ƒë·∫°p.', 
    31: 'Bi·ªÉn c·∫£nh b√°o ƒëo·∫°n ƒë∆∞·ªùng c√≥ th·ªÉ b·ªã ƒë√≥ng bƒÉng ho·∫∑c c√≥ tuy·∫øt ‚Äì d·ªÖ tr∆°n tr∆∞·ª£t.', 
    32: 'Bi·ªÉn c·∫£nh b√°o ƒëo·∫°n ƒë∆∞·ªùng c√≥ ƒë·ªông v·∫≠t hoang d√£ bƒÉng qua ‚Äì c·∫ßn gi·∫£m t·ªëc ƒë·ªô.', 
    33: 'Bi·ªÉn b√°o k·∫øt th√∫c hi·ªáu l·ª±c c·ªßa gi·ªõi h·∫°n t·ªëc ƒë·ªô v√† l·ªánh c·∫•m v∆∞·ª£t tr∆∞·ªõc ƒë√≥.', 
    34: 'Bi·ªÉn hi·ªáu l·ªánh b·∫Øt bu·ªôc r·∫Ω ph·∫£i ·ªü ph√≠a tr∆∞·ªõc.', 
    35: 'Bi·ªÉn hi·ªáu l·ªánh b·∫Øt bu·ªôc r·∫Ω tr√°i ·ªü ph√≠a tr∆∞·ªõc.', 
    36: 'Bi·ªÉn hi·ªáu l·ªánh b·∫Øt bu·ªôc ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng.', 
    37: 'Bi·ªÉn hi·ªáu l·ªánh ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng ho·∫∑c r·∫Ω ph·∫£i.', 
    38: 'Bi·ªÉn hi·ªáu l·ªánh ch·ªâ ƒë∆∞·ª£c ƒëi th·∫≥ng ho·∫∑c r·∫Ω tr√°i.', 
    39: 'Bi·ªÉn hi·ªáu l·ªánh ch·ªâ ƒë∆∞·ª£c ƒëi v·ªÅ ph√≠a b√™n ph·∫£i.', 
    40: 'Bi·ªÉn hi·ªáu l·ªánh ch·ªâ ƒë∆∞·ª£c ƒëi v·ªÅ ph√≠a b√™n tr√°i.', 
    41: 'Bi·ªÉn hi·ªáu l·ªánh b·∫Øt bu·ªôc ƒëi theo h∆∞·ªõng v√≤ng xuy·∫øn ph√≠a tr∆∞·ªõc.', 
    42: 'Bi·ªÉn b√°o hi·ªáu l·ªánh c·∫•m v∆∞·ª£t ƒë√£ h·∫øt hi·ªáu l·ª±c ‚Äì ƒë∆∞·ª£c ph√©p v∆∞·ª£t l·∫°i.',
    43: 'Bi·ªÉn b√°o hi·ªáu l·ªánh c·∫•m xe tr√™n 3.5 t·∫•n v∆∞·ª£t ƒë√£ h·∫øt hi·ªáu l·ª±c.'
}

def preprocess_pil_image(pil_img, target_size=(30, 30)):
    img = pil_img.convert("RGB").resize(target_size)
    arr = np.array(img).astype("float32")
    # n·∫øu c·∫ßn chu·∫©n h√≥a gi·ªëng khi train (vd: /255), uncomment:
    # arr = arr / 255.0
    if arr.ndim == 2:
        arr = np.stack([arr, arr, arr], axis=-1)
    if arr.shape[-1] > 3:
        arr = arr[..., :3]
    arr = np.expand_dims(arr, axis=0)
    return arr

def predict_image(pil_img, threshold=0.6):
    """
    Tr·∫£ v·ªÅ: (label, description, confidence)
    N·∫øu confidence < threshold -> label="Kh√¥ng ph·∫£i bi·ªÉn b√°o"
    N·∫øu c√≥ l·ªói -> label="L·ªói nh·∫≠n d·∫°ng", description = l·ªói
    """
    if model is None:
        return "L·ªói nh·∫≠n d·∫°ng", "Model ch∆∞a ƒë∆∞·ª£c load.", 0.0
    try:
        arr = preprocess_pil_image(pil_img)
        preds = model.predict(arr)[0]
        pred_index = int(np.argmax(preds))
        confidence = float(preds[pred_index])
        if confidence < threshold:
            return "Kh√¥ng ph·∫£i bi·ªÉn b√°o", "ƒê·ªô tin c·∫≠y th·∫•p (< threshold).", confidence
        label = classes.get(pred_index + 1, "Kh√¥ng x√°c ƒë·ªãnh")
        desc = descriptions.get(pred_index + 1, "Kh√¥ng c√≥ m√¥ t·∫£.")
        return label, desc, confidence
    except Exception as e:
        return "L·ªói nh·∫≠n d·∫°ng", str(e), 0.0

# --------- Streamlit UI ---------
st.set_page_config(page_title="AI Nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng", page_icon="üö¶", layout="wide")
st.title("üö¶ AI Nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng")

# Sidebar: c·∫•u h√¨nh
st.sidebar.header("C·∫•u h√¨nh")
threshold = st.sidebar.slider("Ng∆∞·ª°ng confidence (ƒë·ªÉ xem l√† bi·ªÉn b√°o)", min_value=0.0, max_value=1.0, value=0.6, step=0.01)
use_demo = st.sidebar.checkbox("Ch·∫°y demo v·ªõi ·∫£nh m·∫´u", value=False)
input_mode = st.sidebar.radio("Ch·ªçn ngu·ªìn ·∫£nh / camera:", ("Upload ·∫£nh", "Ch·ª•p 1 ·∫£nh (camera tr√¨nh duy·ªát)", "Realtime (video li√™n t·ª•c)"))

st.sidebar.markdown("---")
st.sidebar.write("Model path:")
st.sidebar.write(MODEL_PATH)

# Main layout
col1, col2 = st.columns([1, 1])

# Left column: hi·ªÉn th·ªã input
with col1:
    st.subheader("·∫¢nh ƒë·∫ßu v√†o")
    input_image = None
    # Demo
    if use_demo:
        if os.path.exists(DEMO_FOLDER) and os.path.isdir(DEMO_FOLDER):
            demo_files = [f for f in os.listdir(DEMO_FOLDER) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
            if demo_files:
                chosen_file = random.choice(demo_files)  # ch·ªçn ng·∫´u nhi√™n 1 file
                chosen_path = os.path.join(DEMO_FOLDER, chosen_file)
                try:
                    input_image = Image.open(chosen_path).convert("RGB")
                    st.image(input_image, caption=f"·∫¢nh demo: {chosen_file}", use_column_width=True)
                except Exception as e:
                    st.error(f"Kh√¥ng m·ªü ƒë∆∞·ª£c ·∫£nh demo: {e}")
                    input_image = None
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y ·∫£nh (.jpg/.png) trong th∆∞ m·ª•c {DEMO_FOLDER}.")
        else:
            st.warning(f"Th∆∞ m·ª•c demo kh√¥ng t·ªìn t·∫°i: {DEMO_FOLDER}")
            st.warning(f"Th∆∞ m·ª•c demo kh√¥ng t·ªìn t·∫°i: {DEMO_FOLDER}")
    # T√πy ch·ªçn upload
    if input_mode == "Upload ·∫£nh":
        uploaded_file = st.file_uploader("T·∫£i ·∫£nh bi·ªÉn b√°o l√™n (jpg, png, jpeg)", type=["jpg", "jpeg", "png"])
        if uploaded_file is not None:
            try:
                input_image = Image.open(uploaded_file).convert("RGB")
                st.image(input_image, caption="·∫¢nh t·∫£i l√™n", use_column_width=True)
            except Exception as e:
                st.error(f"L·ªói khi m·ªü ·∫£nh: {e}")
                input_image = None

    # Ch·ª•p 1 ·∫£nh b·∫±ng camera tr√¨nh duy·ªát (st.camera_input)
    elif input_mode == "Ch·ª•p 1 ·∫£nh (camera tr√¨nh duy·ªát)":
        st.info("D√πng webcam tr√¨nh duy·ªát. Sau khi ch·ª•p, ·∫£nh s·∫Ω ƒë∆∞·ª£c g·ª≠i l√™n server ƒë·ªÉ d·ª± ƒëo√°n.")
        camera_file = st.camera_input("Ch·ª•p ·∫£nh t·ª´ webcam")
        if camera_file is not None:
            try:
                input_image = Image.open(camera_file).convert("RGB")
                st.image(input_image, caption="·∫¢nh ch·ª•p t·ª´ camera", use_column_width=True)
            except Exception as e:
                st.error(f"L·ªói khi ƒë·ªçc ·∫£nh t·ª´ camera: {e}")
                input_image = None

    # Realtime mode note
    elif input_mode == "Realtime (video li√™n t·ª•c)":
        st.info("Realtime s·ª≠ d·ª•ng OpenCV (VideoCapture). Ch·ªâ ho·∫°t ƒë·ªông n·∫øu server (n∆°i ch·∫°y Streamlit) c√≥ quy·ªÅn truy c·∫≠p webcam. N·∫øu b·∫°n ch·∫°y tr√™n m√°y c·ª•c b·ªô th√¨ OK.")
        st.markdown("Nh·∫•n n√∫t **B·∫Øt ƒë·∫ßu** ƒë·ªÉ b·∫≠t video; **D·ª´ng** ƒë·ªÉ t·∫Øt.")
        start_realtime = st.button("B·∫Øt ƒë·∫ßu Realtime")
        stop_realtime = st.button("D·ª´ng Realtime")

        # session state qu·∫£n l√Ω loop
        if "realtime_running" not in st.session_state:
            st.session_state.realtime_running = False

        if start_realtime:
            st.session_state.realtime_running = True
        if stop_realtime:
            st.session_state.realtime_running = False

        # n·∫øu ƒëang ch·∫°y realtime, s·∫Ω hi·ªÉn th·ªã v√πng video
        if st.session_state.realtime_running:
            FRAME_WINDOW = st.image([])  # v√πng hi·ªÉn th·ªã khung h√¨nh
            try:
                # M·ªü camera server-side
                cap = cv2.VideoCapture(0)
                if not cap.isOpened():
                    st.error("Kh√¥ng th·ªÉ m·ªü webcam (server). Ki·ªÉm tra quy·ªÅn truy c·∫≠p ho·∫∑c thay ch·ªâ s·ªë camera.")
                    st.session_state.realtime_running = False
                else:
                    # Chu·∫©n b·ªã thay ƒë·ªïi t·∫ßn su·∫•t d·ª± ƒëo√°n ƒë·ªÉ gi·∫£m t·∫£i
                    predict_every_n_frames = 10
                    frame_count = 0
                    last_label = None
                    last_desc = None
                    last_conf = 0.0
                    while st.session_state.realtime_running:
                        ret, frame = cap.read()
                        if not ret:
                            st.warning("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame t·ª´ webcam.")
                            break
                        # hi·ªÉn th·ªã frame (BGR -> RGB)
                        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        FRAME_WINDOW.image(frame_rgb)

                        # d·ª± ƒëo√°n m·ªói N frame
                        if frame_count % predict_every_n_frames == 0:
                            pil_img = Image.fromarray(frame_rgb)
                            label, desc, conf = predict_image(pil_img, threshold=threshold)
                            last_label, last_desc, last_conf = label, desc, conf

                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ nh·ªè b√™n d∆∞·ªõi video
                        st.markdown(f"**K·∫øt qu·∫£ t·∫°m th·ªùi:** {last_label} (conf={last_conf:.2f})")
                        if last_label not in ("Kh√¥ng ph·∫£i bi·ªÉn b√°o", "L·ªói nh·∫≠n d·∫°ng"):
                            st.caption(last_desc)

                        frame_count += 1
                        # throttle loop ƒë·ªÉ tr√°nh chi·∫øm CPU GPU 100%
                        time.sleep(0.03)

                    cap.release()
            except Exception as e:
                st.error(f"L·ªói realtime: {e}")
                st.session_state.realtime_running = False

# Right column: hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n n·∫øu c√≥ ·∫£nh ƒë∆°n
with col2:
    st.subheader("K·∫øt qu·∫£ nh·∫≠n di·ªán")
    if input_mode != "Realtime (video li√™n t·ª•c)":
        if input_image is not None:
            label, desc, conf = predict_image(input_image, threshold=threshold)
            if label == "Kh√¥ng ph·∫£i bi·ªÉn b√°o":
                st.error("üö´ Kh√¥ng ph·∫£i bi·ªÉn b√°o giao th√¥ng!")
                st.write(f"Chi ti·∫øt: {desc} (conf={conf:.2f})")
            elif label == "L·ªói nh·∫≠n d·∫°ng":
                st.error(f"‚ö†Ô∏è L·ªói: {desc}")
            else:
                st.success(f"‚úÖ Bi·ªÉn b√°o: {label}")
                st.info(f"üìñ M√¥ t·∫£: {desc}")
                st.progress(min(int(conf * 100), 100))
                st.write(f"üéØ ƒê·ªô ch√≠nh x√°c: **{conf*100:.1f}%**")
        else:
            st.info("Ch∆∞a c√≥ ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán. H√£y upload ho·∫∑c ch·ª•p ·∫£nh, ho·∫∑c b·∫≠t demo.")
    else:
        st.info("Realtime ƒëang ch·∫°y (n·∫øu b·∫°n ƒë√£ nh·∫•n B·∫Øt ƒë·∫ßu). K·∫øt qu·∫£ realtime xu·∫•t hi·ªán c·∫°nh khung video.")

st.markdown("---")
st.markdown("<center>¬© 2025 UTH SmartTasks | Demo nh·∫≠n di·ªán bi·ªÉn b√°o giao th√¥ng</center>", unsafe_allow_html=True)
