import numpy as np
from keras.models import load_model
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

# ======== 1. Load m√¥ h√¨nh v√† d·ªØ li·ªáu ========
model = load_model('my_model.h5')

# N·∫øu b·∫°n ƒë√£ l∆∞u d·ªØ li·ªáu test ra file npy tr∆∞·ªõc ƒë√≥ th√¨ d√πng:
X_test = np.load('X_test.npy')
y_test = np.load('y_test.npy')

# ======== 2. Ki·ªÉm tra v√† x·ª≠ l√Ω nh√£n y_test ========
# N·∫øu y_test l√† one-hot (2 chi·ªÅu), d√πng argmax ƒë·ªÉ l·∫•y nh√£n th·∫≠t
if len(y_test.shape) > 1 and y_test.shape[1] > 1:
    y_true = np.argmax(y_test, axis=1)
else:
    y_true = y_test  # y_test ƒë√£ l√† d·∫°ng nh√£n th∆∞·ªùng

# ======== 3. D·ª± ƒëo√°n k·∫øt qu·∫£ t·ª´ m√¥ h√¨nh ========
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)

# ======== 4. In b√°o c√°o chi ti·∫øt Precision, Recall, F1-score ========
print("===== B√°o c√°o chi ti·∫øt Precision, Recall, F1-score =====")
print(classification_report(y_true, y_pred_classes, digits=4))

# ======== 5. T√≠nh Accuracy to√†n b·ªô t·∫≠p ki·ªÉm tra ========
acc = accuracy_score(y_true, y_pred_classes)
print(f"üéØ Accuracy to√†n b·ªô t·∫≠p ki·ªÉm tra: {acc * 100:.2f}%")

# ======== 6. V·∫Ω ma tr·∫≠n nh·∫ßm l·∫´n ========
cm = confusion_matrix(y_true, y_pred_classes)

plt.figure(figsize=(12, 10))
sns.heatmap(cm, annot=False, cmap='Blues', fmt='g')
plt.xlabel('D·ª± ƒëo√°n')
plt.ylabel('Th·ª±c t·∫ø')
plt.title('Ma tr·∫≠n nh·∫ßm l·∫´n (Confusion Matrix)')
plt.show()
